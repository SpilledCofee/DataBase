/**
 * The finance, marketing, and sales departments want to understand customers better but need the historical data to do so.
 * They want to have a database/pseudo-DB that stores all of the customer order
 * information along with the time and date of their orders.
 * [This database will grow each simulated “day”.]
 *
 * This will program will function as a database that the employee is able to:
 *
 * **View the inventory of the product**
 *   -- This will allow the user to look product inventory
 *
 * **Adding the order of the product
 *   -- This will add in a new entry into the database.
 *
 * **Updating the order
 *   -- Will update the entry within the database.
 *
 * **Deleting the order of the product
 *   -- Will be able to delete an entry in the database.
 *
 *
 * **Viewing the orders made within the database
 *   -- Will search the database by finding the product ID and user_email
 *   -- View the current order
 *
 */

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;


public class CustomerOrder {


    private Scanner console;
    private ArrayList<OrderItems> orderInfo;
    private static String FILE_NAME = "customer_orders_team1.csv";


    public CustomerOrder(){
        orderInfo = new ArrayList<>(4000000);
        console = new Scanner(System.in);
        try {
            loadFile();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

    }

    public void loadFile() throws FileNotFoundException {
        try {
            Scanner in = new Scanner(new FileInputStream(FILE_NAME));
            //This will get past the first line that is just the titles of the collums and not data
            String titles = in.nextLine();

            //This loop will extrapolate the data from each line and create the entryItem with the line's data
            while(in.hasNextLine()) {
                String line = in.nextLine();
                int end = line.indexOf(",", 0);
                String date = line.substring(0, end);
                int start = end + 1;
                end = line.indexOf(",", start);
                String cust_email = line.substring(start, end);
                start = end + 1;
                end = line.indexOf(",", start);
                String tempLocation = line.substring(start, end);
                int cust_location = Integer.parseInt(tempLocation);
                start = end + 1;
                end = line.indexOf(",", start);
                String product_id = line.substring(start,end);
                start = end + 1;
                end = line.indexOf(",", start);
                String tempQuantity = line.substring(start, end);
                int product_quantity = Integer.parseInt(tempQuantity);


                OrderItem orderItem = new OrderItem(date,cust_email,cust_location,product_id,product_quantity);
                orderInfo.add(orderItem);
            }
            in.close();

        }catch (FileNotFoundException e) {}
        System.out.print(orderInfo.size());

    }
    //This will take all the elemnts in the array and save them back onto the CSV file
    public void saveFile() throws FileNotFoundException {
        try {
            PrintWriter out = new PrintWriter(FILE_NAME);
            //This puts back the labels that the loadFile removed
            out.println();
            int i = 0;

            while(i < orderInfo.size()){
                String saved = orderInfo.get(i).toString();
                out.println(saved);
                i++;
            }
            out.close();
        } catch(FileNotFoundException e){}

    }

    public static void main(String[]args) throws IOException{

        //Initializing the constructor
        CustomerOrder custOrder = new CustomerOrder();

    }

    //This method will have the employee add in customer data into the database
    private void addOrder(){

    }

    //This method will update the current entry within the database
    private void updateOrder(){

    }

    //This method will delete the current entry within the database
    private void deleteOrder(){

    }

    //This method will view the order specifically with the
    // date,customer_email,customer_location, productID, quality
    private void viewOrder(){

    }




}
